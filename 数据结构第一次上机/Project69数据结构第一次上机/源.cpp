#include<iostream>#include<malloc.h>      #include<stdio.h>       #include<process.h>#define ListAdd 2using namespace std;struct List{	int*elem;	int length;	int listSize;};void IniList(List*&L){	(*L).listSize = 10;	(*L).elem = (int*)malloc((*L).listSize * sizeof(int));	if (!(*L).elem) exit;	(*L).length = 0;}int GetElem(List*&L, int i){	return (*L).elem[i];}void InsertElem(List*&L, int i, int e){	int*newbase, *p, *q;	if ((*L).length >= (*L).listSize)	{		newbase = (int*)realloc((*L).elem, ((*L).listSize + ListAdd) * sizeof(int));		if (!newbase) exit;	}	*q = (*L).elem[(*L).length];	*p = (*L).elem[i - 1];	for (; q - p; q--)		*q = *(q - 1);	*p = e;	(*L).length++;	(*L).listSize += ListAdd;}void DeleteList(List*&L, int i){
	int*p;	*p = (*L).elem[i - 1];	for (; p - (*L).elem < (*L).length; p++)	{		*p = *(p + 1);	}	(*L).length--;}void ShowList(List L){
	int*p = L.elem;	for (int i = 0; i < L.length; i++)		cout << p[i]<<" ";	cout << endl;}void LocateList(List L,int e){
	int i,k=0;	for (i = 0; i < L.length; i++)	{		if (L.elem[i] == e)		{			if (k == 0)			{				cout << "您要找的元素位于该表第" << i << "位";				k = 1;			}			else cout << "和第" << i << "位";		}	}	if (i = 1)		cout << "." << endl;	else cout << "此表中无您要找的元素。"<<endl;}void Union(List*La, List*Lb)//归并{
	int a = La->length, b = Lb->length;	for (int i = 0; i < a; i++)	{		for (int j = 0; j < b; j++)		{			if (GetElem(La, i) == GetElem(La, j))				break;		}		InsertElem(Lb, Lb->length, GetElem(Lb, i));	}}void AddUnion(List*La, List*Lb)//合并{
	int b = Lb->length;	for (int i = 0; i < b; i++)	{		InsertElem(La, La->length, GetElem(Lb, i));	}}void SortList(List*L)//排序{
	int i, j, k,min;	int len = L->length;	for (i = 0; i < len - 1; i++)	{		k = i;		min = GetElem(L, i);		for (j = i+1; j < len - i - 1; j++)			if (min > GetElem(L, j))				k= j;		if (k != i) 		{			min = L->elem[j];			L->elem[j] = L->elem[i];			L->elem[i] = min;		}	}}int mian(){
	cout << "请您先创建一个顺序表La" << endl;	List*La;	IniList(La);	int el,i=1;	while (cin >> el)	{		InsertElem(La, i, el);		i++;	}	cout << "请选择您想要完成的操作：" << endl;	S1:cout << "1.插入元素\t" << "2.删除元素\n" << "3.查找元素\t" << "4.遍历元素\n" << "5.顺序排序\t" << "6.创建表Lb/n";	int s1;	cin >> s1;	if (s1 != 1 && s1 != 2 && s1 != 3 && s1 != 4 && s1 != 5 && s1 != 6)	{		cout << "输入错误" << endl;		goto S1;	}	switch (s1)	{	case 1: {		cout << "在表第__个元素前插入元素__:";		cin >> i>>el;		InsertElem(La, i, el);		cout << "删除后的表为：" << endl;		ShowList(*La);		break;	}	case 2: {		cout << "删除第__个元素：";		cin >> i;		DeleteList(La, i);			}	}}